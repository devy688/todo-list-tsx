{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","GlobalStyle.tsx","App.tsx","index.tsx"],"names":["persistAtom","recoilPersist","categoryKinds","atom","key","default","effects_UNSTABLE","categorySelector","selector","get","set","newValue","categoryState","toDoState","toDoSelector","toDos","category","filter","toDo","Form","styled","form","Input","input","Button","button","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","length","alert","text","id","Date","now","required","placeholder","List","li","ToDo","useRecoilState","categories","onChange","event","value","target","prevToDos","targetIndex","findIndex","newToDo","newToDos","splice","map","item","selected","onClick","prevTodos","Planner","div","Title","h1","Categories","Content","ToDoList","setCategory","setCategoryKinds","listRef","useRef","categoryRef","clickCategory","current","list","currentTarget","classList","add","setAttribute","newCategories","href","rel","i","ref","el","onKeyPress","preventDefault","todo","GlobalStyle","createGlobalStyle","reset","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAGQA,EAAgBC,0BAAhBD,YAKKE,EAAgBC,eAAe,CAC1CC,IAAK,aACLC,QAJwB,CAAC,QAAS,QAAS,QAK3CC,iBAAkB,CAACN,KAGRO,EAAmBC,mBAAmB,CACjDJ,IAAK,mBACLK,IAAK,YAEH,OADmBA,EADH,EAAVA,KACiBP,IAGzBQ,IAAK,WAAUC,IACbD,EAD0B,EAApBA,KACFR,EAAeS,MAWVC,EAAgBT,eAAa,CACxCC,IAAK,WACLC,QAAS,UAGEQ,EAAYV,eAAc,CACrCC,IAAK,OACLC,QAAS,GACTC,iBAAkB,CAACN,KAGRc,EAAeN,mBAAS,CACnCJ,IAAK,eACLK,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAM,EAAQN,EAAII,GACZG,EAAWP,EAAIG,GACrB,OAAOG,EAAME,QAAO,SAACC,GAAD,OAAUA,EAAKF,WAAaA,Q,eCvC9CG,EAAOC,IAAOC,KAAV,2CAIJC,EAAQF,IAAOG,MAAV,iFAMLC,EAASJ,IAAOK,OAAV,mEAuCGC,I,EAAAA,EAlCf,WACE,IAAMC,EAAWC,4BAAkBf,GAC7BG,EAAWa,yBAAejB,GAEhC,EAA6CkB,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAiBhC,OACE,eAACd,EAAD,CAAMe,SAAUF,GAhBD,SAAC,GAAqB,IAAnBd,EAAkB,EAAlBA,KAClBS,GAAS,SAACQ,GACR,OAAwB,KAApBA,EAASC,QACXC,MAAM,+CACCF,GAGK,CADE,CAAEG,KAAMpB,EAAMqB,GAAIC,KAAKC,MAAOzB,aAChC,mBAAgBmB,OAKhCF,EAAS,OAAQ,OAIjB,UACE,cAACX,EAAD,2BACMS,EAAS,OAAQ,CACnBW,SAAU,0BAFd,IAIEC,YAAY,mBAEd,cAACnB,EAAD,sBChDAoB,EAAOxB,IAAOyB,GAAV,oQAmEKC,I,UAAAA,EAhDf,YAA8C,IAA9BR,EAA6B,EAA7BA,KAAMtB,EAAuB,EAAvBA,SAAUuB,EAAa,EAAbA,GAC9B,EAA0BQ,yBAAelC,GAAzC,mBAAcc,GAAd,WACMqB,EAAanB,yBAAetB,GA2BlC,OACE,eAACqC,EAAD,WACE,+BAAON,IACP,gCACE,wBAAQW,SA7BS,SAACC,GACtB,IACYC,EACRD,EADFE,OAAUD,MAGZxB,GAAS,SAAC0B,GACR,IAAMC,EAAcD,EAAUE,WAAU,SAACrC,GAAD,OAAUA,EAAKqB,KAAOA,KACxDiB,EAAU,CAAElB,OAAMC,KAAIvB,SAAUmC,GAEhCM,EAAQ,YAAOJ,GAGrB,OAFAI,EAASC,OAAOJ,EAAa,EAAGE,GAEzBC,MAiBL,SACGT,EAAWW,KAAI,SAACC,GACf,OAAI5C,IAAa4C,EACR,wBAAQC,UAAQ,EAAhB,SAAkB7C,IAElB,iCAAS4C,SAItB,wBAAQE,QAtBK,WACjBnC,GAAS,SAACoC,GAIR,OAHc,YAAOA,GACI9C,QAAO,SAACC,GAAD,OAAUA,EAAKqB,KAAOA,SAmBpD,2BC1DFyB,EAAU5C,IAAO6C,IAAV,wNAUPC,EAAQ9C,IAAO+C,GAAV,2PAYLC,EAAahD,IAAO6C,IAAV,ivBA4CVI,EAAUjD,IAAO6C,IAAV,kFAMPrB,EAAOxB,IAAO6C,IAAV,qOA2HKK,I,EAAAA,EA1Gf,WACE,IAAMvD,EAAQc,yBAAef,GAC7B,EAAgCiC,yBAAenC,GAA/C,mBAAiB2D,GAAjB,WACA,EAA0CxB,yBAAexC,GAAzD,mBAAOL,EAAP,KAAsBsE,EAAtB,KAEMC,EAAUC,iBAAoC,IAC9CC,EAAcD,iBAAyB,MAEvCE,EAAgB,SAAC1B,GACrBuB,GACEA,EAAQI,QAAQlB,KAAI,SAACmB,GAMnB,OALQ,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMvC,MAAOW,EAAM6B,cAAcxC,GACnCW,EAAM6B,cAAcC,UAAUC,IAAI,YAE9B,OAAJH,QAAI,IAAJA,KAAMI,aAAa,QAAS,IAEvB,QAGXX,EAAYrB,EAAM6B,cAAcxC,KAG5BP,EAAe,SAACmB,GACpB,IAAMgC,EAAa,sBAAOjF,GAAP,CAAsBiD,IACzCqB,EAAiBW,IAiCnB,OACE,eAACnB,EAAD,WACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,8CACA,sBACEoB,KAAK,mIACLC,IAAI,oBAIV,cAACnB,EAAD,wCACA,eAACG,EAAD,WACE,eAACD,EAAD,WACE,6BACGlE,EAAcyD,KAAI,SAAC3C,EAAUsE,GAAX,OACjB,oBAEEC,IAAK,SAACC,GAAD,OAASf,EAAQI,QAAQS,GAAKE,GACnC1B,QAASc,EACTrC,GAAIvB,EAJN,SAMGA,GALIA,EAAWsE,QAStB,gCACE,uBACEC,IAAKZ,EACLhC,YAAY,WACZ8C,WA7CU,SAACvC,GACrB,GAA6B,KAAzBhD,EAAckC,OAAlB,CAKA,IACmBe,EACfD,EADF6B,cAAiB5B,MAGD,UAAdD,EAAM9C,KACR4B,EAAamB,QATbd,MAAM,sCA6CA,wBAAQyB,QA9DE,SAClBZ,GAGI,IAAD,EACHA,EAAMwC,iBAEuB,KAAzBxF,EAAckC,OAKlBJ,EAAY,OAAC2C,QAAD,IAACA,GAAD,UAACA,EAAaE,eAAd,aAAC,EAAsB1B,OAJjCd,MAAM,yDAsDA,uBAGJ,eAAC,EAAD,WACE,wCACA,cAAC,EAAD,IACA,oCACGtB,QADH,IACGA,OADH,EACGA,EAAO4C,KAAI,SAACgC,GAAD,OACV,cAAC,EAAD,eAAwBA,GAAbA,EAAKpD,mB,QC3LfqD,EAJKC,YAAH,oCACXC,KCUSC,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,aAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.4cdaaf12.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\nimport { recoilPersist } from \"recoil-persist\";\r\n\r\nconst { persistAtom } = recoilPersist();\r\n\r\n/* 카테고리 종류 */\r\nconst initialCategories = [\"TO_DO\", \"DOING\", \"DONE\"];\r\n\r\nexport const categoryKinds = atom<string[]>({\r\n  key: \"categories\",\r\n  default: initialCategories,\r\n  effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const categorySelector = selector<string[]>({\r\n  key: \"categorySelector\",\r\n  get: ({ get }) => {\r\n    const categories = get(categoryKinds);\r\n    return categories;\r\n  },\r\n  set: ({ set }, newValue) => {\r\n    set(categoryKinds, newValue);\r\n  },\r\n});\r\n\r\n/* 투두리스트 정보 */\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: string;\r\n}\r\n\r\nexport const categoryState = atom<string>({\r\n  key: \"category\",\r\n  default: \"TO_DO\",\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: [],\r\n  effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState);\r\n    const category = get(categoryState);\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  },\r\n});\r\n","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { categoryState, toDoState } from \"../atoms\";\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nconst Form = styled.form`\r\n  padding: 0;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 195px;\r\n  border: none;\r\n  padding: 3px 0;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  border: none;\r\n  padding: 3px 10px;\r\n`;\r\n\r\nfunction CreateToDo() {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const category = useRecoilValue(categoryState);\r\n\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n\r\n  const onSubmit = ({ toDo }: IForm) => {\r\n    setToDos((oldToDos) => {\r\n      if (oldToDos.length === 15) {\r\n        alert(\"무리하지마세욥!\");\r\n        return oldToDos;\r\n      }\r\n      const newToDo = { text: toDo, id: Date.now(), category };\r\n      const newToDos = [newToDo, ...oldToDos];\r\n\r\n      return newToDos;\r\n    });\r\n\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit(onSubmit)}>\r\n      <Input\r\n        {...register(\"toDo\", {\r\n          required: \"Please write a To do\",\r\n        })}\r\n        placeholder=\"Write a To do\"\r\n      ></Input>\r\n      <Button>Add</Button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import React from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { categorySelector, IToDo, toDoState } from \"../atoms\";\r\n\r\nconst List = styled.li`\r\n  height: 31px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0;\r\n\r\n  span {\r\n    font-size: 16px;\r\n    width: 195px;\r\n  }\r\n\r\n  button {\r\n    color: red;\r\n    border: none;\r\n    cursor: pointer;\r\n    margin-left: 5px;\r\n  }\r\n`;\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const [toDos, setToDos] = useRecoilState(toDoState);\r\n  const categories = useRecoilValue(categorySelector);\r\n\r\n  const moveToSelected = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n\r\n    setToDos((prevToDos) => {\r\n      const targetIndex = prevToDos.findIndex((toDo) => toDo.id === id);\r\n      const newToDo = { text, id, category: value };\r\n\r\n      const newToDos = [...prevToDos];\r\n      newToDos.splice(targetIndex, 1, newToDo);\r\n\r\n      return newToDos;\r\n    });\r\n  };\r\n\r\n  const deleteToDo = () => {\r\n    setToDos((prevTodos) => {\r\n      const newToDos = [...prevTodos];\r\n      const deleted = newToDos.filter((toDo) => toDo.id !== id);\r\n\r\n      return deleted;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <List>\r\n      <span>{text}</span>\r\n      <div>\r\n        <select onChange={moveToSelected}>\r\n          {categories.map((item) => {\r\n            if (category === item) {\r\n              return <option selected>{category}</option>;\r\n            } else {\r\n              return <option>{item}</option>;\r\n            }\r\n          })}\r\n        </select>\r\n        <button onClick={deleteToDo}>Delete</button>\r\n      </div>\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import React, { useRef } from \"react\";\r\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { categorySelector, categoryState, toDoSelector } from \"../atoms\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nconst Planner = styled.div`\r\n  width: 450px;\r\n  min-width: 450px;\r\n  height: 685px;\r\n  background: url(\"./images/yellow.png\") center/cover no-repeat;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  background-color: #273c75;\r\n  color: white;\r\n  font-size: 1.2em;\r\n  font-family: \"Yanone Kaffeesatz\", sans-serif;\r\n  height: 40px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0.5em;\r\n`;\r\n\r\nconst Categories = styled.div`\r\n  width: 90px;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-family: \"Yanone Kaffeesatz\", sans-serif;\r\n  padding: 0;\r\n  padding-top: 63px;\r\n  text-align: center;\r\n\r\n  ul {\r\n    font-size: 1em;\r\n    padding: 0 !important;\r\n\r\n    li {\r\n      cursor: pointer;\r\n      padding: 7.6px 0;\r\n      &:hover {\r\n        background-color: #ffc0cb45;\r\n      }\r\n      &.selected {\r\n        background-color: #ffc0cb45;\r\n      }\r\n    }\r\n  }\r\n\r\n  div {\r\n    width: 100%;\r\n    margin-top: 35px;\r\n    input {\r\n      text-align: center;\r\n      border: none;\r\n      width: 80px;\r\n      padding: 5px 0;\r\n    }\r\n    button {\r\n      border: none;\r\n      width: 85px;\r\n      margin-top: 6px;\r\n      padding: 5px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst List = styled.div`\r\n  width: 75%;\r\n  padding: 8px 16px;\r\n\r\n  span {\r\n    font-family: \"Source Sans Pro\", sans-serif;\r\n    font-size: 20px;\r\n  }\r\n  form {\r\n    padding-top: 9px;\r\n  }\r\n\r\n  ul {\r\n    padding-top: 5px;\r\n  }\r\n`;\r\n\r\nfunction ToDoList() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const [categoryKinds, setCategoryKinds] = useRecoilState(categorySelector);\r\n\r\n  const listRef = useRef<Array<HTMLLIElement | null>>([]);\r\n  const categoryRef = useRef<HTMLInputElement>(null);\r\n\r\n  const clickCategory = (event: React.MouseEvent<HTMLLIElement>) => {\r\n    listRef &&\r\n      listRef.current.map((list) => {\r\n        if (list?.id === event.currentTarget.id) {\r\n          event.currentTarget.classList.add(\"selected\");\r\n        } else {\r\n          list?.setAttribute(\"class\", \"\");\r\n        }\r\n        return null;\r\n      });\r\n\r\n    setCategory(event.currentTarget.id);\r\n  };\r\n\r\n  const handleSubmit = (value: string) => {\r\n    const newCategories = [...categoryKinds, value];\r\n    setCategoryKinds(newCategories);\r\n  };\r\n\r\n  const addCategory = (\r\n    event:\r\n      | React.FormEvent<HTMLFormElement>\r\n      | React.MouseEvent<HTMLButtonElement>\r\n  ) => {\r\n    event.preventDefault();\r\n\r\n    if (categoryKinds.length === 13) {\r\n      alert(\"더 이상 추가 못해욤!\");\r\n      return;\r\n    }\r\n\r\n    handleSubmit(categoryRef?.current?.value as string);\r\n  };\r\n\r\n  const inputCategory = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (categoryKinds.length === 13) {\r\n      alert(\"충분합니다!\");\r\n      return;\r\n    }\r\n\r\n    const {\r\n      currentTarget: { value },\r\n    } = event;\r\n\r\n    if (event.key === \"Enter\") {\r\n      handleSubmit(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Planner>\r\n      <HelmetProvider>\r\n        <Helmet>\r\n          <title>Todo List</title>\r\n          <link\r\n            href=\"https://fonts.googleapis.com/css2?family=Fuzzy+Bubbles&family=Source+Sans+Pro:wght@300;400&family=Yanone+Kaffeesatz&display=swap\"\r\n            rel=\"stylesheet\"\r\n          ></link>\r\n        </Helmet>\r\n      </HelmetProvider>\r\n      <Title>Todo list with TypeScript</Title>\r\n      <Content>\r\n        <Categories>\r\n          <ul>\r\n            {categoryKinds.map((category, i) => (\r\n              <li\r\n                key={category + i} // 변경하기\r\n                ref={(el) => (listRef.current[i] = el)}\r\n                onClick={clickCategory}\r\n                id={category}\r\n              >\r\n                {category}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <div>\r\n            <input\r\n              ref={categoryRef}\r\n              placeholder=\"Category\"\r\n              onKeyPress={inputCategory}\r\n            />\r\n            <button onClick={addCategory}>Add</button>\r\n          </div>\r\n        </Categories>\r\n        <List>\r\n          <span>List</span>\r\n          <CreateToDo />\r\n          <ul>\r\n            {toDos?.map((todo) => (\r\n              <ToDo key={todo.id} {...todo} />\r\n            ))}\r\n          </ul>\r\n        </List>\r\n      </Content>\r\n    </Planner>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    ${reset}\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ToDoList from \"./components/ToDoList\";\nimport GlobalStyle from \"./GlobalStyle\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <GlobalStyle />\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { RecoilRoot } from \"recoil\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}